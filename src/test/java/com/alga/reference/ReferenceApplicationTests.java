package com.alga.reference;

import com.alga.reference.model.Guest;
import com.alga.reference.model.OrderItem;
import org.assertj.core.api.CollectionAssert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = ReferenceApplication.class)
@ActiveProfiles(value = "workaround")
public class ReferenceApplicationTests {

    @Autowired
    private MongoTemplate mongoTemplate;

    @Autowired
    @Qualifier("OldDataGenerator")
    private DataGenerator oldDataGenerator;

    @Autowired
    @Qualifier("NewDataGenerator")
    private DataGenerator newDataGenerator;

    @Before
    public void init() {
        oldDataGenerator.generate();
        newDataGenerator.generate();
    }

    @Test
    public void testLoadGuestWithoutDbRef() {
        // Load new data as com.alga.reference.model.Guest from database (generated by newDataGenerator): guest without DBRef
        Guest guestWithoutDbref = mongoTemplate.findById("guest_with_docref", Guest.class);
        assert guestWithoutDbref != null;
        CollectionAssert.assertThatCollection(guestWithoutDbref.getOrderItems()).map(OrderItem::getId)
                .containsExactlyInAnyOrder("orderItem4", "orderItem5", "orderItem6");
    }

    @Test
    public void testLoadGuestWithDbRef() {
        // Load old data as com.alga.reference.model.Guest from database (generated by oldDataGenerator): guest with DBRef
        // Why it is failed without workaround in com.alga.reference.config.MongoConfig (see GuestDbRefResolver)?
        //      SpelEvaluationException failed with message: "EL1008E: Property or field '_id' cannot be found on object of type 'com.mongodb.DBRef' - maybe not public or not valid?"
        // Why DBRef-s are taken into account in lookup expression?
        Guest guestWithDbRef = mongoTemplate.findById("guest_with_dbref", Guest.class);
        assert guestWithDbRef != null;
        CollectionAssert.assertThatCollection(guestWithDbRef.getOrderItems()).map(OrderItem::getId)
                .containsExactlyInAnyOrder("orderItem1", "orderItem2", "orderItem3");
    }

}
